name: Deploy

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: onstrument-backend
  ECS_CLUSTER: onstrument-prod-cluster
  ECS_SERVICE: onstrument-prod-backend-service
  FRONTEND_BUCKET: onstrument-prod-frontend
  CLOUDFRONT_DISTRIBUTION: E26HJ2P8HB4IIH

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Debug Info
        run: |
          echo "Running backend deployment"
          echo "Git ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"

      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/onstrument-prod-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --platform linux/amd64 \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            -f docker/backend/Dockerfile .

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to ECS and Monitor
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --no-cli-pager \
            --region $AWS_REGION

          echo "Monitoring deployment..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region $AWS_REGION

  deploy-frontend:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Debug Info
        run: |
          echo "Running frontend deployment"
          echo "Git ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"

      - uses: actions/checkout@v4
        with:
          submodules: false  # Don't try to fetch submodules

      # Manually copy charting library files from your repo
      - name: Setup TradingView Library
        run: |
          mkdir -p frontend/public/charting_library
          cp -r .tradingview-cache/* frontend/public/charting_library/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/onstrument-prod-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm install
          cd frontend && npm install

      - name: Build Frontend
        run: |
          cd frontend
          npm run build -- --mode production

      - name: Deploy Frontend to S3
        run: |
          aws s3 sync frontend/dist/ s3://${{ env.FRONTEND_BUCKET }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} \
            --paths "/*"
